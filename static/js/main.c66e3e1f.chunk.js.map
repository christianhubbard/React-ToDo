{"version":3,"sources":["ToDoListItem.js","NewToDoForm.js","ToDoApp.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListItem","props","state","isEditing","task","handleRemove","bind","handleEdit","handleChange","handleUpdate","handleToggle","e","this","removeItemFromList","id","setState","target","name","value","preventDefault","updateToDo","toggleToDo","className","onSubmit","onChange","completed","onClick","class","Component","NewToDoForm","handleSubmit","addDataToHigherState","uuid","htmlFor","placeholder","type","ToDoApp","todos","addDataToState","toggleCompletion","data","oldState","filter","todo","updatedTask","updatedToDos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c66e3e1f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Todo.css'\r\n\r\n\r\nexport default class ToDoListItem extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isEditing:false,\r\n            task: this.props.task,\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n    handleRemove(e){\r\n        this.props.removeItemFromList(this.props.id)\r\n    }\r\n    handleEdit(){\r\n        this.setState({isEditing: !this.state.isEditing})\r\n    }\r\n    handleChange(e){\r\n        this.setState({isEditing:true, [e.target.name]: e.target.value})\r\n    }\r\n    handleUpdate(e){\r\n        e.preventDefault()\r\n        this.props.updateToDo(this.props.id, this.state.task)\r\n        this.setState({isEditing:false})\r\n    }\r\n    handleToggle(){\r\n        this.props.toggleToDo(this.props.id);\r\n    }\r\n    render() {\r\n  \r\n        let result;\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <div className=\"Todo-edit-form\">\r\n                <form onSubmit={this.handleUpdate}>\r\n                    <input name=\"task\" id={this.props.id} onChange={this.handleChange} value={this.state.task}></input>\r\n                    <button>Save</button>\r\n                </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className='Todo'>\r\n                    <li className={this.props.completed ? 'Todo-task completed' : 'Todo-task'} onClick={this.handleToggle}>\r\n                        {this.props.task}\r\n                    </li>\r\n                    <div className='Todo-buttons'>\r\n                        <button onClick={this.handleEdit}><i class='fas fa-pen' /></button>\r\n                        <button onClick={this.handleRemove}><i class='fas fa-trash' /></button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n        return (result);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\nimport './NewToDoForm.css'\r\n\r\nexport default class NewToDoForm extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {task: \"\"}\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(e){\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        this.props.addDataToHigherState({...this.state, id: uuid(), completed: false})\r\n        this.setState({task:\"\"})\r\n    }\r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\">New Todo</label>\r\n                <input \r\n                id=\"task\" \r\n                name=\"task\" \r\n                placeholder=\"New Todo\" \r\n                type=\"text\" \r\n                value={this.state.task} \r\n                onChange={this.handleChange} />\r\n                <button>ADD TODO</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ToDoListItem from './ToDoListItem';\r\nimport NewToDoForm from './NewToDoForm.js';\r\nimport './TodoList.css';\r\n\r\nexport default class ToDoApp extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {todos: []}\r\n        this.addDataToState = this.addDataToState.bind(this);\r\n        this.removeItemFromList = this.removeItemFromList.bind(this);\r\n        this.updateToDo = this.updateToDo.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n    addDataToState(data){\r\n        this.setState({\r\n            todos: [...this.state.todos, data]\r\n        });\r\n    }\r\n    removeItemFromList(id){\r\n        this.setState(oldState => ({todos: oldState.todos.filter(todo => todo.id !== id)}))\r\n    }\r\n    updateToDo(id, updatedTask){\r\n        const updatedToDos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return { ...todo, task: updatedTask }\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({ todos:updatedToDos })\r\n    }\r\n    toggleCompletion(id){\r\n        const updatedToDos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return { ...todo, completed: !todo.completed}\r\n            }\r\n            return todo;\r\n        });\r\n        this.setState({ todos:updatedToDos })\r\n        \r\n    }\r\n    render() {\r\n        const todos = this.state.todos.map(todo => {\r\n            return <ToDoListItem key={todo.id} id={todo.id} task={todo.task} removeItemFromList={this.removeItemFromList} toggleToDo={this.toggleCompletion} completed={todo.completed} updateToDo={this.updateToDo}/>\r\n        });\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1>To do List!~ <span>A simple React Todo application.</span></h1>\r\n                <NewToDoForm key={\"newtodoformkey\"} addDataToHigherState={this.addDataToState}/>\r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ToDoApp from './ToDoApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ToDoApp />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}